{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","sibling","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.0bbdb690.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n  // create: function (tagName) {\r\n  //   return document.createElement(tagName);\r\n  // },\r\n  create(string) {\r\n    // 创建节点\r\n    const container = document.createElement(\"template\");\r\n    container.innerHTML = string.trim();\r\n    return container.content.firstChild;\r\n  },\r\n  after(node, node2) {\r\n    // 新增弟弟\r\n    node.parentNode.insertBefore(node2, node.nextSibling);\r\n  },\r\n  before(node, node2) {\r\n    // 新增哥哥\r\n    node.parentNode.insertBefore(node2, node);\r\n  },\r\n  append(parent, node) {\r\n    // 新增儿子\r\n    parent.appendChild(node);\r\n  },\r\n  wrap(node, parent) {\r\n    // 新增爸爸（先创建哥哥，再作为为哥哥的儿子）\r\n    dom.before(node, parent);\r\n    dom.after(parent, node);\r\n  },\r\n  remove(node) {\r\n    // 删除节点\r\n    node.parentNode.removeChild(node);\r\n    return node;\r\n  },\r\n  empty(parent) {\r\n    // 删除孩子们\r\n    const childNodes = node.childNodes;\r\n    // const {childNodes} = node\r\n    const array = [];\r\n    let x = node.firstChild;\r\n    while (x) {\r\n      array.push(dom.remove(node.firstChild));\r\n      x = node.firstChild;\r\n    }\r\n    return array;\r\n  },\r\n  attr(node, name, value) {\r\n    // 读写属性(重载)\r\n    if (arguments.length === 3) {\r\n      node.setAttribute(name, value);\r\n    } else if (arguments.length === 2) {\r\n      return node.getAttribute(name);\r\n    }\r\n  },\r\n  text(node, string) {\r\n    // 读写文本内容（适配ie）\r\n    if (`innerText` in node) {\r\n      node.innerText = string; // IE\r\n    } else {\r\n      node.textContent = string; // Firefox\r\n    }\r\n  },\r\n  html(node, string) {\r\n    // 读写HTML内容（重载）\r\n    if (arguments.length === 2) {\r\n      node.innerHTML = string;\r\n    } else if (arguments.length === 1) {\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  style(node, name, value) {\r\n    // 修改style\r\n    if (arguments.length === 3) {\r\n      node.style[name] = value;\r\n    } else if (arguments.length == 2) {\r\n      if (typeof name === `string`) {\r\n        return node.style[name];\r\n      } else if (name instanceof Object) {\r\n        for (let key in name) {\r\n          node.style[key] = name[key];\r\n        }\r\n      }\r\n    }\r\n  },\r\n  class: {\r\n    add(node, className) {\r\n      // 添加class\r\n      node.classList.add(className);\r\n    },\r\n    remove(node, className) {\r\n      // 删除class\r\n      node.classList.remove(className);\r\n    },\r\n    has(node, className) {\r\n      // 查看class是否存在\r\n      return node.classList.contains(className);\r\n    },\r\n  },\r\n  on(node, eventName, fn) {\r\n    // 添加事件监听\r\n    node.addEventListener(eventName, fn);\r\n  },\r\n  off(node, eventName, fn) {\r\n    // 删除事件监听\r\n    node.removeEventListener(eventName, fn);\r\n  },\r\n  find(selector, scope) {\r\n    // 获取标签们\r\n    return (scope || document).querySelectorAll(selector);\r\n  },\r\n  parent(node) {\r\n    // 获取父元素\r\n    return node.parentNode;\r\n  },\r\n  children(node) {\r\n    // 获取子元素\r\n    return node.children;\r\n  },\r\n  sibling(node) {\r\n    // 获取兄弟姐妹\r\n    return Array.from(node.parentNode.children).filter(n !== node);\r\n  },\r\n  next(node) {\r\n    // 获取弟弟\r\n    let x = node.nextSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.nextSibling;\r\n    }\r\n    return x;\r\n  },\r\n  previous(node) {\r\n    // 获取哥哥\r\n    let x = node.previousSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.previousSibling;\r\n    }\r\n    return x;\r\n  },\r\n  each(nodeList, fn) {\r\n    // 获取所有结点\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  },\r\n  index(node) {\r\n    // 获取排行老几\r\n    const list = dom.children(node.parentNode);\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i] === node) {\r\n        return i;\r\n      }\r\n    }\r\n  },\r\n};\r\n"]}